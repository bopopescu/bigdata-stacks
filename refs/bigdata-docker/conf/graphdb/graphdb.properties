####### PATHS AND DIRECTORIES ######
#
# GraphDB home directory. Defines the root directory for GraphDB on the file system.
# It acts as a parent for all configurable paths like repository data, configuration, logs and other runtime
# data unless the location for a specific functionality is explicitly set by its corresponding property.
# The default is the same as the GraphDB distribution directory.
# The actual values for graphdb.home and the other graphdb.home.xxx properties will be printed in the log
# when GraphDB starts.
#
graphdb.home = /opt/graphdb/home
#
#
# GraphDB data directory. Defines the directory where the engine stores all repository data.
# This directory must be writable by the GraphDB process.
# The default is ${graphdb.home}/data.
#
graphdb.home.data = /opt/graphdb/home/data
#
#
# GraphDB logs directory. Defines the directory where the log files are written.
# This directory must be writable by the GraphDB process.
# The default is ${graphdb.home}/logs.
#
graphdb.home.logs = /opt/graphdb/home/logs
#
#
# GraphDB configuration directory. Used for user-editable configuration, including this file. Stores
# provided runtime license through the application, persisted as ${graphdb.home.conf}/graphdb.license.
# This directory and all files within it may be read-only for GraphDB only if no license is set in the way described above.
# The default is ${graphdb.home}/conf.
#
# Since the location of this config file depends on this property, it does not make sense to set it here.
# Instead you can provide is a system property with -D.
#
# graphdb.home.conf =
#
#
# GraphDB work directory. Used for non-user-editable database configurations.
# This directory must be writable by the GraphDB process.
# The default is ${graphdb.home}/work.
#
# graphdb.home.work =
#
#
# Graphdb global page cache memory parameter. By default the page cache will
# allocate 50% of the maximum Java heap memory (-Xmx) for the JVM process.
# Setting this value too high will cause OME during the execution of memory intensive queries.
#
# graphdb.page.cache.size=10G


###### NETWORK SETTINGS ######
#
# HTTP port for running GraphDB in standalone mode. The default is 7200.
#
# graphdb.connector.port = 7200
#
#
# Enable SSL (uncomment to enable)
# graphdb.connector.SSLEnabled = true
# graphdb.connector.scheme = https
# graphdb.connector.secure = true
#
# GraphDB uses the Java implementation of SSL, which requires a configured key in the Java keystore.
# To setup keystore uncomment the following properties and set keystorePass and keyPass to the actual values.
#
# graphdb.connector.keyFile = <path to the keystore file if different from ${graphdb.home}/keystore>
# graphdb.connector.keystorePass = <secret>
# graphdb.connector.keyAlias = graphdb
# graphdb.connector.keyPass = <secret>
#
# How to generate a keystore?
#
# Option 1: Generate a self-signed key, which would require to trust the certificate in all clients.
#
#   keytool -genkey -alias graphdb -keyalg RSA
#
# Option 2: Convert a third party trusted OpenSSL certificate to PKCS12 key and then import to the Java keystore.
#
#   keytool -importkeystore -deststorepass MYPASS -srckeystore mypkcs12.p12 -srcstoretype PKCS12
#
# For any additional information please refer to https://tomcat.apache.org/tomcat-9.0-doc/ssl-howto.html
#
# In addition to the above settings, you can set any Tomcat Connector attribute through a property:
#   graphdb.connector.<attribute> = xxx
#
# See https://tomcat.apache.org/tomcat-9.0-doc/config/http.html#Attributes for more information.
#
# Another option is to use Self Signed SSL Certificate setting following two properties
#
# graphdb.connector.SSLCertificateFile = <path-to-file>
# graphdb.connector.SSLCertificateKeyFile = <path-to-file>


###### ENGINE OVERRIDE ######
#
# The GraphDB Engine can be configured through a set of properties that start with the graphdb.engine. prefix.
# These properties correspond to the properties that can be set when creating a repository through the Workbench
# or through a .ttl file.
#
# Note that properties defined here WILL OVERRIDE the properties for each repository, regardless of whether you created
# the repository before or after you set the global value of an engine property. As such, the global overrides
# should be used only in specific cases while for normal everyday needs you should set the corresponding properties
# when you create a repository.
#
#
# graphdb.engine.<property> = xxx


# A global setting that ensures IRI validation in the entity pool. It is performed only when an IRI is seen for the first time
# (i.e., when being created in the entity pool). For consistency reasons, not only IRIs coming from RDF serializations,
# but also all new IRIs (via API or SPARQL), will be validated in the same way.
# This property can be turned off by setting its value to false.
#
# graphdb.engine.entity.validate = true


###### AUTHENTICATION TOKEN SECRET ######
#
# GraphDB authentication token secret could be set by passing it as a configuration parameter
#
# graphdb.auth.token.secret = <my-shared-secret-key>
#
# In case of not explicitly specified, GraphDB will try to obtain one automatically from the SSL
# certificate if present or will randomly generate one

###### LDAP CONFIGURATION ######
#
# Turn on ldap authentication and configure the server.
#
# graphdb.auth.module = ldap
# graphdb.auth.ldap.url = ldap://localhost:10389/dc=example,dc=org

# Permit access for all users that are part of the “people” unit of the fictional “example.org” organisation.
#
# graphdb.auth.ldap.user.search.base = ou=people
# graphdb.auth.ldap.user.search.filter = (cn={0})

# Make all users in the Administration group GraphDB administrators as well.
#
# graphdb.auth.ldap.role.search.base = ou=groups
# graphdb.auth.ldap.role.search.filter = (member={0})
# graphdb.auth.ldap.role.map.administrator = Administration

# Make all users in the Management group GraphDB Repository Managers as well.
#
# graphdb.auth.ldap.role.map.repositoryManager = Management

# Enable all users in the Readers group to read the my_repo repository.
#
# graphdb.auth.ldap.role.map.repository.read.my_repo = Readers

# Enable all users in the Writers group to write and read the my_repo repository.
#
# graphdb.auth.ldap.role.map.repository.write.my_repo = Writers

# All entries located under the "groups" organizational unit that have members (i.e., groups),
# will be able to read repositories that share their common name.
#
# graphdb.auth.ldap.repository.read.base = ou=groups
# graphdb.auth.ldap.repository.read.filter = (member={0})
# graphdb.auth.ldap.repository.read.attribute = cn

# All entries located under the "groups" organizational unit that have members (i.e., groups),
# will be able to read and write to repositories that share their common name.
#
# graphdb.auth.ldap.repository.write.base = ou=groups
# graphdb.auth.ldap.repository.write.filter = (member={0})
# graphdb.auth.ldap.repository.write.attribute = cn

###### AUDIT TRAIL ######
#
# Enable the detail audit trail for all operations with the minimal access role of:
# USER, REPO_MANAGER, ADMIN, ANY
#
# graphdb.audit.role = USER
#
# and read, write operations with the minimal access of:
# READ, WRITE
#
# graphdb.audit.repository = READ
#
# Audit the specific headers
#
# graphdb.audit.headers = Origin, Host
#
# List headers that should be included into logs in front of client requests.
#
# graphdb.request.id.alternatives = X-Amz-Request-Id
#
# Enable logging of "X-Request-Id" header and listed in graphdb.request.id.alternatives headers into any log.
# "X-Request-Id" header will be included by default. In case "X-Request-Id" is not present in the headers of
# the request it will be generated randomly in UUID type 5 format.
#
# graphdb.append.request.id.headers = true